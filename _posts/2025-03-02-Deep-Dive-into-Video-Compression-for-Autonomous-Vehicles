# Diving Deep into Video Token Compression for Autonomous Vehicles

I've spent the last few weeks obsessing over a fascinating challenge: squeezing more compression out of already-compressed video tokens used for training autonomous driving systems. Like most rabbit holes I find myself in, this one started innocently enough with a simple question - "Can we further compress these VQ-VAE tokens?" - and quickly spiraled into a full-blown exploration of compression algorithms, bit manipulation, and the fundamental limits of information theory.

The tokens I've been working with come from Comma AI's driving system, where front-facing camera footage gets processed through a Vector Quantized Variational Autoencoder (VQ-VAE). This encoder transforms raw video into a compact representation - essentially a codebook of tokens that capture the essential visual information needed for their world model to make driving decisions. My challenge was to see if I could compress these tokens even further without losing critical information.

What makes this particularly interesting is that we're attempting to compress data that's already been compressed. It's like trying to squeeze a sponge that's already been wrung out - finding those last few drops requires increasingly clever techniques. The target was an ambitious 3.0x compression ratio, which would dramatically reduce storage requirements and potentially speed up training for these driving models.

I'll admit I was a bit stubborn about this project - the official compression challenge ended months ago, but I couldn't let it go. There's something irresistible about optimization problems, especially ones where you're pushing against the theoretical limits of what's possible. Plus, working with solveit made it easy to rapidly test different approaches that would have taken me ages to code from scratch.

So grab a coffee and join me as I walk through this journey of compression algorithms, vectorization tricks, and the inevitable trade-offs between perfect accuracy and practical efficiency. Even if you're not building autonomous vehicles, the techniques we'll explore have applications anywhere you need to efficiently store or transmit large amounts of structured data.
